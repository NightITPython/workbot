from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from filters.tc import isTc
from database.db import Database
from keyboards.inline import back
from utils import validate_chat

from .states import EditBot

db = Database()
router = Router()

def add_vbeaver_chat_handler():
    router = Router()
    @router.callback_query(F.data == "edit_bot:add_vbeaver_chat", isTc())
    async def add_vbeaver_chat(
        c: CallbackQuery,
        state: FSMContext
    ):
    
        await c.message.edit_text(
            text="üí¨ <b>–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ —á–∞—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç –∏ –¥–∞–ª–∏ –µ–º—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</b>",
            reply_markup=back()
        )
        await state.set_state(EditBot.add_vbeaver_chat)
    
    
    @router.message(F.text, EditBot.add_vbeaver_chat)
    async def answer(
        msg: Message,
        state: FSMContext,
        bot: Bot
    ):
        chat_id = msg.text
        token = bot.token
        bot_id = (await bot.me()).id
        try:
            chat_id = int(chat_id)
    
        except:
            return await msg.answer(
                text="‚ùå <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–π–¥–∏</b>",
                reply_markup=back()
            )
    
    
        valid = await validate_chat(chat_id, token=token)
        if not valid:
            return await msg.answer(
                text="<b>‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç –∏–ª–∏ –Ω–µ –¥–∞–ª–∏ –µ–º—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>",
                reply_markup=back()
            )
    
        await db.edit_bot(
            bot_id,
            column="vbeaver_chat",
            value=chat_id
        )
        await msg.answer(
            text="<b>‚úÖ –ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω!</b>"
        )
        await state.clear()

    return router