from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram import F, Router, Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from asyncio import sleep

from filters.creator import IsCreator
from keyboards.inline import CreatorPanel, back_to
from database.db import Database
from utils import validate_token, check_pattern_token, validate_chat
from start import start_bot
from config import bots as bots_data

from .__init__ import routers
from .states import Data

db = Database()
router = Router()

data = {}




@router.callback_query(F.data == "create_bot", IsCreator())
async def create_bot(
    c: CallbackQuery,
    state: FSMContext
):
    panel = CreatorPanel()
    token = data.get("token", "–ü—É—Å—Ç–æ")
    chat = data.get("chat", "–ü—É—Å—Ç–æ")
    creator = data.get("creator", "–ü—É—Å—Ç–æ")
    
    await state.clear()
    await c.message.edit_text(
        text=f"""üõ†Ô∏è<b> –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫</b>

<b>üîë –¢–æ–∫–µ–Ω</b> - <blockquote>API Token –∏–∑ BotFather</blockquote>


<b>üí¨ –ß–∞—Ç-–ª–æ–≥ </b>- <blockquote>ID —á–∞—Ç–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏ ( —ç—Ç–æ –Ω–µ –æ–±—â–∏–π —á–∞—Ç ) </blockquote>


<b>ü¶£ TC </b>- <blockquote>–ê–π–¥–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞</blockquote>

<blockquote>–ù—ã–Ω–µ—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ:
TOKEN: {token} - –ê–π–¥–∏ —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
CHAT: {chat} - –ê–π–¥–∏ —á–∞—Ç–∞
CREATOR: {creator} - –ê–π–¥–∏ –¢/–°
</blockquote>

""",
        reply_markup=panel.create_bot(data)
    )


@router.callback_query(F.data.startswith("create_bot/token:"))
@router.callback_query(F.data.startswith("create_bot/chat:"))
@router.callback_query(F.data.startswith("create_bot/creator:"))
async def insert(
    c: CallbackQuery,
    state: FSMContext
):
    payload = c.data.split("/")[1].split(":")[0]
    texts = {
        "token": "üîë <i>–í—Å—Ç–∞–≤—å—Ç–µ TOKEN-–±–æ—Ç–∞ –∏–∑ BotFather</i>",
        "chat": "üí¨ <i>–í—Å—Ç–∞–≤—å—Ç–µ –∞–π–¥–∏ —á–∞—Ç–∞ —Å –ª–æ–≥–∞–º–∏</i>",
        "creator": "ü¶£ <i>–í—Å—Ç–∞–≤—å—Ç–µ –∞–π–¥–∏ –¢–°</i>"
    }
    states = {
        "token": Data.token,
        "chat": Data.chat,
        "creator": Data.creator
    }
    if payload == "chat" and not "token" in data:
        return await c.answer(
            text="üîë –°–Ω–∞—á–∞–ª–æ –¥–æ–±–∞–≤—å—Ç–µ TOKEN"
        )
    await c.message.edit_text(
        text=texts[payload],
        reply_markup=back_to("create_bot")
    )

    await state.set_state(states[payload])
    await state.update_data(msg_id=c.message.message_id)

@router.message(F.text, Data.token)
async def get_token(
    msg: Message,
    state: FSMContext,
    bot: Bot
):
    token = msg.text
    state_data = await state.get_data()
    await msg.delete()
    await bot.delete_message(
        chat_id=msg.chat.id,
        message_id=state_data['msg_id']
    )
    for_edit = await msg.answer(
        text="üîë <b> –ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω..</b>"
    )
    await sleep(1)
    check = check_pattern_token(token)
    if not check:
        return await for_edit.edit_text(
            text="üî¥ <b> –¢–æ–∫–µ–Ω –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É</b>"
        )
    else:
        await for_edit.edit_text(
            text="üîë<b> –¢–æ–∫–µ–Ω –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É, –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω..</b>"
        )

    valid = await validate_token(token)
    if not valid:
        return await for_edit.edit_text(
            text="üî¥ <b>–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π!</b>"
        )

    else:
        await for_edit.edit_text(
            text="üîë <b>–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º..</b>"
        )
        id_token = await db.add_token(token)
        data['token'] = id_token
        await for_edit.edit_text(
            text="‚úÖ <b>–¢–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω!</b>",
            reply_markup=back_to("create_bot")
        )
        await state.clear()



@router.message(F.text, Data.chat)
async def get_chat(
    msg: Message,
    state: FSMContext, 
    bot: Bot
):
    chat = msg.text
    state_data = await state.get_data()
    await msg.delete()
    await bot.delete_message(
        chat_id=msg.chat.id,
        message_id=state_data['msg_id']
    )

    for_edit = await msg.answer(
        text="üí¨ <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–π–¥–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É..</b>"
    )

    await sleep(1)
    token = await db.get_token(data['token'])
    await for_edit.edit_text(
        text="üí¨ <b>–ê–π–¥–∏ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É, –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∞–π–¥–∏..</b>"
    )
    valid = await validate_chat(chat, token)
    if not valid:
        return await for_edit.edit_text(
            text="üî¥ <b>–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –¥–æ–±–∞–≤–∏–ª–∏ –ª–∏ –≤—ã –±–æ—Ç–∞ –≤ —á–∞—Ç –∏ –¥–∞–ª–∏ –µ–º—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!</b>",
            reply_markup=back_to("create_bot")
        )

    data["chat"] = int(chat)
    await for_edit.edit_text(
        text="‚úÖ <b>–ê–π–¥–∏ –¥–æ–±–∞–≤–ª–µ–Ω!</b>",
        reply_markup=back_to("create_bot")
    )
    await state.clear()



@router.message(F.text, Data.creator)
async def get_creator(
    msg: Message,
    state: FSMContext,
    bot: Bot
):
    creator = msg.text
    state_data = await state.get_data()
    await msg.delete()
    await bot.delete_message(
        chat_id=msg.chat.id,
        message_id=state_data['msg_id']
    )

    for_edit = await msg.answer(
        text="ü¶£ <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–π–¥–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É..</b>"
    )
    if not creator.isdigit():
        return await for_edit.edit_text(
            text="üî¥ <b>–ê–π–¥–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –∞–π–¥–∏</b>",
            reply_markup=back_to("create_bot")
        )
    await sleep(1)

    await for_edit.edit_text(
        text="ü¶£ <b>–ê–π–¥–∏ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É, –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∞–π–¥–∏..</b>"
    )
    valid = await db.user_exists(int(creator))
    if not valid:
        return await for_edit.edit_text(
            text="üî¥ <b>–Æ–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.</b>",
            reply_markup=back_to("create_bot")
        )

    data["creator"] = int(creator)
    await for_edit.edit_text(
        text="‚úÖ <b>–ê–π–¥–∏ –¥–æ–±–∞–≤–ª–µ–Ω!</b>",
        reply_markup=back_to("create_bot")
    )
    await state.clear()


@router.callback_query(F.data == "create_bot/clear")
async def bot_clear(
    c: CallbackQuery
):
    data.clear()
    panel = CreatorPanel()
    token = data.get("token", "–ü—É—Å—Ç–æ")
    chat = data.get("chat", "–ü—É—Å—Ç–æ")
    creator = data.get("creator", "–ü—É—Å—Ç–æ")
    await c.answer(
        text="‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã"
    )
    await c.message.edit_text(
        text=f"""üõ†Ô∏è<b> –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫</b>

<b>üîë –¢–æ–∫–µ–Ω</b> - <blockquote>API Token –∏–∑ BotFather</blockquote>


<b>üí¨ –ß–∞—Ç-–ª–æ–≥ </b>- <blockquote>ID —á–∞—Ç–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏ ( —ç—Ç–æ –Ω–µ –æ–±—â–∏–π —á–∞—Ç ) </blockquote>


<b>ü¶£ TC </b>- <blockquote>–ê–π–¥–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞</blockquote>

<blockquote>–ù—ã–Ω–µ—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ:
TOKEN: {token} - –ê–π–¥–∏ —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
CHAT: {chat} - –ê–π–¥–∏ —á–∞—Ç–∞
CREATOR: {creator} - –ê–π–¥–∏ –¢/–°
</blockquote>

""",
        reply_markup=panel.create_bot(data)
    )

@router.callback_query(F.data.startswith("create_bot:"))
async def done(c: CallbackQuery):
    data = c.data.split(":")[1].split("_")
    if "empty" in data:
        return await c.answer(
            text="üî¥ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è",
            show_alert=True
        )

    token, chat, creator = await db.get_token(int(data[0])), int(data[1]), int(data[2])
    me = await Bot(token).me()
    
    bot_id = me.id
    username = me.username
    await db.add_bot(
        token=token,
        bot_id=bot_id,
        chat=chat,
        creator=creator
    )

    await c.message.delete()
    await c.message.answer(
        text=f"üü¢ <b>–ë–æ—Ç @{username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î –∏ –∑–∞–ø—É—â–µ–Ω!</b>",
        reply_markup=back_to("cpanel")
    )
    data.clear()
    dp = Dispatcher()
    bots_data[bot_id] = dp

    await start_bot(
        token=token,
        routers=routers,
        dp=dp
    )
